#!/usr/bin/expect -f
# Usage: authprofiles.exp profile1 profile2 ... profileN
#
# This Expect script was generated by autoexpect on Thu Dec 31 11:50:57 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout -1
match_max 100000

set profiles $argv

proc gettoken { } {
    set TOKEN [exec oathtool --base32 --totp $::env(AWS_TOTP_SECRET)]
    return "$TOKEN"
}

foreach profile $profiles { ;
    set ACCOUNT_ID $::env(AWS_ACCOUNT_ID)
    set USERNAME $::env(AWS_IAM_USER)
    set count 1
    set sleep_duration 3
    while true {
        set token [gettoken]
        send_user "\nPROFILE ---------> $profile $token (attempt #$count)\n"
        spawn aws --profile $profile sts get-caller-identity

        expect {
            "Enter MFA code for arn:aws:iam::$ACCOUNT_ID:mfa/$USERNAME: " {
                send -- "$token\r"
                expect {
                    "*failed with invalid MFA one time pass code.*" {
                        set tosleep "[expr $sleep_duration * $count]"
                        send -- "oops: invalid code, sleeping $tosleep and trying again\r"
                        sleep $tosleep
                    }
                }
                "*$ACCOUNT_ID*?" {
                    send_user "$profile successfully authenticated!\n"
                    break
                }
            }
            "*$ACCOUNT_ID*?" {
                send_user "$profile already OK!\n"
                break
            }
        }

        incr count
        if {$count >= 5} {
            send_error "ERROR: Giving up on profile $profile after $count tries\n"
            break
        }
        sleep 1
    }
}
